@using System.Data.Entity
@model ExpressQuiz.ViewModels.EditQuizViewModel



<ul class="breadcrumb" style="margin-bottom: 5px;">
    <li class="active">Quiz</li>
</ul>

@using (Ajax.BeginForm("Edit", "Quizzes", new AjaxOptions()
{
    UpdateTargetId = "content",
    HttpMethod = "Post",
    InsertionMode = InsertionMode.Replace,
    OnSuccess = "applyValidation",
    OnFailure = "handleError"
}))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Quiz.Id)
        @Html.HiddenFor(model => model.Order)
        @Html.HiddenFor(model => model.Quiz.CreatedBy)
        
        <div class="form-group">
            @Html.LabelFor(m => m.SelectedCategory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.SelectedCategory, Model.Categories, htmlAttributes: new { @class = "form-control" })
            </div>

        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.NewCategory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewCategory, new { htmlAttributes = new { @class = "form-control" } })
            </div>

        </div>
        

        <div class="form-group">
            @Html.LabelFor(model => model.Quiz.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quiz.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quiz.Name, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Quiz.Summary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quiz.Summary, new { htmlAttributes = new { @class = "form-control", @rows = 5 } })
                @Html.ValidationMessageFor(model => model.Quiz.Summary, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Quiz.IsTimeable, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
               
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.Quiz.IsTimeable, new { htmlAttributes = new { @class = "form-control checkbox" } })
                </div>
              
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Quiz.Locked, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.Quiz.Locked, new { htmlAttributes = new { @class = "form-control checkbox" } })
                </div>

            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Quiz.AllowPoints, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{

                  
                         <div class="checkbox">
                                @Html.CheckBoxFor(model => model.Quiz.AllowPoints, new { htmlAttributes = new { @class = "form-control checkbox", } })
                            </div>

                }
               

            </div>
        </div>
        
      

        <div class="form-group">
               
               
                <div class="col-md-offset-11 col-md-1">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>
       
       
        <hr />
        @Ajax.ActionLink("Add question", "CreateQuestion", "Quizzes" ,new { id = Model.Quiz.Id, orderId = Model.Quiz.Questions.Count }, new AjaxOptions()
                                    {
                                        InsertionMode = InsertionMode.Replace,
                                        HttpMethod = "Get",
                                        UpdateTargetId = "content",
                                        OnSuccess = "applyValidation",
                                        OnFailure = "handleError"

                                    }, htmlAttributes: new { @class = "btn btn-primary btn-block" } )


        <table id="questionsTbl" class="table table-striped table-hover table-bordered">
            <thead>
                <tr>
                    <td></td>
                    <td>Question</td>
                    <td>Answers</td>
                </tr>

            </thead>
            <tbody>
                @{

    foreach (var q in Model.Quiz.Questions.AsQueryable().AsNoTracking().OrderBy(x => x.OrderId))
    {
        <tr id="@q.Id">
            <td class="dragHandle"></td>
            <td >
                @q.Text
            </td>
            <td>
                @q.Answers.Count
            </td>
            <td>
                @Ajax.ActionLink("Edit", "EditQuestion", "Quizzes", new { id = q.Id }, new AjaxOptions()
                {
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "Get",
                    UpdateTargetId = "content",
                    OnSuccess = "applyValidation",
                    OnFailure = "handleError"

                })

            </td>
            <td>
                @Ajax.ActionLink("Delete", "DeleteQuestion", "Quizzes", new { id = q.Id }, new AjaxOptions()
                {
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "Get",
                    UpdateTargetId = "content",
                    OnSuccess = "applyValidation",
                    OnFailure = "handleError"

                })

            </td>
              
        </tr>

    }
                }
            </tbody>
        </table>

    </div>
}


<script>
    
    $(function () {

        

        $("#questionsTbl").tableDnD({
            onDrop: function (table, row) {
                var rows = table.tBodies[0].rows;
                var ids = "";
                for (var i = 0; i < rows.length; i++) {
                    if (rows[i] !== undefined) {
                        ids += rows[i].id + ",";
                    }
                }
                $("#Order").val(ids);
            },
            dragHandle: ".dragHandle"
        });

    
        $("#questionsTbl tr").hover(function () {
            $(this.cells[0]).addClass('showDragHandle');
        }, function () {
            $(this.cells[0]).removeClass('showDragHandle');
        });

    });

   
</script>


@if (Model.ModifiedByUser)
{
    <script>
        showSavedAlert();
    </script>
}